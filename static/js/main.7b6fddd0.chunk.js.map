{"version":3,"sources":["images/fox.png","card.js","App.js","images/0.png","images/1.png","images/2.png","images/3.png","images/4.png","images/5.png","index.js"],"names":["Card","onClick","card","index","isInactive","isFlipped","isDisabled","className","classnames","src","fox","alt","image","uniqueCardsArray","type","shuffleCards","array","i","length","randomIndex","Math","floor","random","currentIndex","temp","App","useState","concat","cards","setCards","openCards","setOpenCards","clearedCards","setClearedCards","shouldDisableAllCards","setShouldDisableAllCards","moves","setMoves","showModal","setShowModal","JSON","parse","localStorage","getItem","Number","POSITIVE_INFINITY","bestScore","setBestScore","timeout","useRef","evaluate","first","second","prev","current","setTimeout","handleCardClick","clearTimeout","useEffect","Object","keys","highScore","min","setItem","checkCompletion","checkIsFlipped","includes","checkIsInactive","Boolean","handleRestart","Button","variant","map","Dialog","open","disableBackdropClick","disableEscapeKeyDown","DialogTitle","id","DialogContent","DialogContentText","DialogActions","color","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.7b6fddd0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/fox.d5531264.png\";","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport fox from \"./images/fox.png\";\r\nimport \"./card.scss\";\r\n\r\nconst Card = ({ onClick, card, index, isInactive, isFlipped, isDisabled }) => {\r\n  const handleClick = () => {\r\n    !isFlipped && !isDisabled && onClick(index);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classnames(\"card\", {\r\n        \"is-flipped\": isFlipped,\r\n        \"is-inactive\": isInactive\r\n      })}\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"card-face card-font-face\">\r\n        <img src={fox} alt=\"Cards\" />\r\n      </div>\r\n      <div className=\"card-face card-back-face\">\r\n        <img src={card.image} alt=\"Cards\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useEffect, useState, useRef } from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  Button,\n  DialogTitle\n} from \"@material-ui/core\";\nimport Card from \"./card\";\nimport \"./app.scss\";\nimport zero from \"./images/0.png\";\nimport one from \"./images/1.png\";\nimport two from \"./images/2.png\";\nimport three from \"./images/3.png\";\nimport four from \"./images/4.png\";\nimport five from \"./images/5.png\";\n\n\nconst uniqueCardsArray = [\n  {\n    type: \"zero\",\n    image: zero\n  },\n  {\n    type: \"one\",\n    image: one\n  },\n  {\n    type: \"two\",\n    image: two\n  },\n  {\n    type: \"three\",\n    image: three\n  },\n  {\n    type: \"four\",\n    image: four\n  },\n  {\n    type: \"five\",\n    image: five\n  }\n];\n\nfunction shuffleCards(array) {\n  const length = array.length;\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    const temp = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temp;\n  }\n  return array;\n}\nexport default function App() {\n  const [cards, setCards] = useState(() =>\n    shuffleCards(uniqueCardsArray.concat(uniqueCardsArray))\n  );\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [bestScore, setBestScore] = useState(\n    JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY\n  );\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueCardsArray.length) {\n      setShowModal(true);\n      const highScore = Math.min(moves, bestScore);\n      setBestScore(highScore);\n      localStorage.setItem(\"bestScore\", highScore);\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n    if (cards[first].type === cards[second].type) {\n      setClearedCards((prev) => ({ ...prev, [cards[first].type]: true }));\n      setOpenCards([]);\n      return;\n    }\n    // This is to flip the cards back after 500ms duration\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 500);\n  };\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) {\n      setOpenCards((prev) => [...prev, index]);\n      setMoves((moves) => moves + 1);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n  const checkIsFlipped = (index) => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = (card) => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setMoves(0);\n    setShouldDisableAllCards(false);\n    // set a shuffled deck of cards\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h3>FLIP THE CARDS TO MATCH THE PAIRS</h3>\n        <div className=\"restart\">\n          <Button onClick={handleRestart} variant=\"contained\">\n            Reset\n          </Button>\n        </div>\n      </header>\n      <div className=\"container\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={index}\n              card={card}\n              index={index}\n              isDisabled={shouldDisableAllCards}\n              isInactive={checkIsInactive(card)}\n              isFlipped={checkIsFlipped(index)}\n              onClick={handleCardClick}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        <div className=\"score\">\n          <div className=\"moves\">\n            <span className=\"bold\">Moves you made:</span> {moves}\n          </div>\n          {localStorage.getItem(\"bestScore\") && (\n            <div className=\"high-score\">\n              <span className=\"bold\">Best Score:</span> {bestScore}\n            </div>\n          )}\n        </div>\n      </footer>\n      <Dialog\n        open={showModal}\n        disableBackdropClick\n        disableEscapeKeyDown\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          Congratulations. You finished the game.\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You completed the game in {moves} moves. Your best score is{\" \"}\n            {bestScore} moves.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">\n            Reset\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/0.37cd7b48.png\";","export default __webpack_public_path__ + \"static/media/1.5573fcc3.png\";","export default __webpack_public_path__ + \"static/media/2.6fc2d50e.png\";","export default __webpack_public_path__ + \"static/media/3.f850a522.png\";","export default __webpack_public_path__ + \"static/media/4.092196d9.png\";","export default __webpack_public_path__ + \"static/media/5.f1728e2d.png\";","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}